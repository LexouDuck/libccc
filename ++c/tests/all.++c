

//void	WaitAndRunCallback(void (*callback)(void));

int	main()
{
	value = *pointer; // pure C
	value = $pointer; // ++C


	address = &value; // pure C
	address = @value; // ++C


	value = 0b110;	// pure C (GCC extension only)
	value = 0b110;	// ++C


	value = 0644;	// pure C
	value = 0o644;	// ++C


	char*	strings[9];	// pure C
	char*[9] strings;	// ++C

	void	(*f)(int, char*);	// pure C
	(int, char*) => void	f;	// ++C

	// example nested function (with another function pointer as argument)
	void	(*g)(int, char*	(*)(char*));// pure C
	(int, (char*)=>char*) => void	g;	// ++C


	char const* regex1 = r"\b(My_\w*)\b"g;
	char const* regex2 = r"(?x) ( [^)] __damn__ )"i;
	char const* regex3 = r"[a-zA-Z_]\w*"sg;

	WaitAndRunCallback(
		void HelloWorld(void)
		{
			printf("Hello World!\n");
		}
	);
}

// NB: when transpiled to C, the 'HelloWorld' local function will be in global scope, named:
void	WaitAndRunCallback(void (*callback)(void));

static
void	main_HelloWorld(void)
{
	printf("Hello World!\n");
}
int	main()
{
	WaitAndRunCallback(
		&main_HelloWorld
	);
}

// ++C
void MyFunc(int arg1, int arg2, [ int arg3, int arg4 = 0, int arg5 = 0 ]);
// usage example
MyFunc(1, 1, .arg3=1, .arg4=1);


void MyFunc_kwargs(int arg1, int arg2, struct MyFunc_kwargs { int _; int arg3; int arg4; } kwargs);
#define MyFunc(ARG1, ARG2, ...) \
	MyFunc(ARG1, ARG2, &(struct MyFunc_kwargs { int _; int arg3; int arg4; }) { ._ = 0, __VA_ARGS__ })
// usage example
MyFunc(.arg1=1, .arg2=1, .arg3=1, .arg4=1, .arg5=0);


//! compile-time operators like sizeof() can be used in `#if` statements directly now, the transpiler will handle it
#if (sizeof(char) == 1)
#endif

//! Here is an example of function-call generic type promotion (to use with va_arg())
#if (typeof(T) is char)
	#define T_VA_ARG	int
#elif (typeof(T) is short)
	#define T_VA_ARG	int
#elif (typeof(T) is float)
	#define T_VA_ARG	double
#else
	#define T_VA_ARG	T
#endif


//! works similar to namespaces and templates in C++, but simpler and more powerful (read more about generic namespace types below)
#namespace NameSpace.Type<T=(float|int), P>

//! define a custom operator (optionally with a certain specified `precedence` and `associativity`)
#operator	$	(char* a, char* b) => int	= DoOperation(a, b)

//! define a custom accessor syntax for a struct/union (custom brackets `get` functions)
#accessor (struct s var)[int index] => int	= GetFunction(var, index)

//! type reflection - a special kind of macro, for types (inserts contents of a type into the code)
#reflect(struct s)	printf("%s %s;\n", #type, #name)

//! works like a `#define` macro, but occurs at transpile-time, and uses the powerful `m4` macro engine (by K&R)
#replace MACRO() <string>

//! insert header include guards at the beginning and end of a header file (and c++ `extern "C" {}`guards)
#header __HEADER_H

//! include a binary file into the executable as an extern const global variable
#incbin myvar "filepath"

//! cross-platform way to declare function attributes (in GNU C for example: `__attribute__((alias, ...))`)
#is alias(token)


// integer power operator
#operator ** (int left, int right) => int = \
	Math<int>.Power(left, right)

// usage example:
printf("%d", 2 ** 15);


// NULL check and return operator
#operator ?? (void const* left, void const* right) => void const* = \
	(left == NULL ? right : left)

// define a 'word' operator wrapper above the actual operator
#replace OTHERWISE	<??>

// usage example:
char* new_str = str ?? "str is NULL";
char* new_str = str OTHERWISE "str is NULL";


// fixed-point math
#operator(4, FALSE)	+ (t_fixed a, t_fixed b) => t_fixed = Fixed.Add(a, b)
#operator(4, FALSE)	- (t_fixed a, t_fixed b) => t_fixed = Fixed.Sub(a, b)
#operator(3, FALSE)	* (t_fixed a, t_fixed b) => t_fixed = Fixed.Mul(a, b)
#operator(3, FALSE)	/ (t_fixed a, t_fixed b) => t_fixed = Fixed.Div(a, b)
#operator(3, FALSE)	% (t_fixed a, t_fixed b) => t_fixed = Fixed.Mod(a, b)


// string concatenation operators
#operator(5, FALSE) +   (char const* left, char const* right) => char* = String.Join(left, right)
#operator(5, FALSE) :+  (char*       left, char const* right) => char* = String.Append(left, right)
#operator(5, FALSE) +:  (char const* left, char*       right) => char* = String.Prepend(left, right)
#operator(5, FALSE) :+: (char*       left, char*       right) => char* = String.Merge(left, right)

// usage example:
char* new_str = "Concatenated: " + str;


// unary complex number conjugate operator
typedef struct complex
{
	float re;
	float im;
}				s_complex;

#operator ! (s_complex right) => s_complex = \
	(Complex.Conjugate(right))

// usage example:
s_complex z = { 1.5, 2.2 };
s_complex conjug = !z;


// boolean exclusive OR (XOR) operator
#operator(12, FALSE) ^^ (bool left, bool right) => bool = \
	((left ? TRUE : FALSE) ^ (right ? TRUE : FALSE))

// usage example:
if (i < 3 ^^ x >= 4) { /* do stuff */}


// 3D vector subtraction operator
#operator - (s_vector3d left, s_vector3d right) => s_vector3d = \
	(s_vector3d) \
	{ \
		.x = left.x - right.x, \
		.y = left.y - right.y, \
		.z = left.z - right.z, \
	} \

// usage example:
s_vector3d u = (s_vector3d){ 1, 2, 3 };
s_vector3d v = (s_vector3d){ 4, 5, 6 };
s_vector3d diff = (u - v);


// example color type
typedef	uint32_t	t_argb32;
// example palette color array struct
typedef struct palette
{
	size_t		color_count;
	t_argb32*	colors;
}				s_palette;

// declare an accessor to get colors from the palette
#accessor (s_palette palette)[int index] => t_argb32 = \
	palette.colors[index]

// usage example:
t_argb32 color = palette[3];


// example 32-bit color bitmap array
typedef struct bitmap
{
	t_argb32*	pixels;
	int			width;
	int			height;
}				s_bitmap;

// declare an accessor to get pixels from their coordinates
#accessor (s_bitmap bitmap)[int x, int y] => t_argb32 = \
	bitmap.pixels[y * bitmap.width + x]

// usage example:
for (int x = 0; x < bitmap->width; ++x)
for (int y = 0; y < bitmap->height; ++y)
{
	t_argb32 color = bitmap[x, y];
}


typedef struct keyval
{
	char*		key;
	char*		type;
	void*		value;
}				s_keyval;

typedef struct dict
{
	t_size		count;
	s_keyval*	items;
}				s_dict;

#namespace Dict

s_dict	New(int items, s_keyval ...)
{
	return ((s_dict)
	{
		.count = items,
		Array<s_keyval>.New(items, va_list),
	});
}

// declare an accessor to get dictionary values from their key names
#accessor (s_dict dict)[char const* key] => void* = \
	Dict.Get(dict, key)

// usage example:
s_dict dict = Dict.New(2,
	(s_keyval){ .key="foo", .value="FOO" },
	(s_keyval){ .key="bar", .value="BAR" },
);

char* bar = (char*)dict["bar"];


// parse utf8 char smartly in a string
typedef wchar_t	t_utf8;
t_utf8	String_Get_UTF8(t_utf8* str, size_t index)
{
	char* str = (char*)utf8;
	t_utf8 result = str[index];
	if (str[++index] && (result & 0x000080))	result |= (str[index] << 8);
	if (str[++index] && (result & 0x008000))	result |= (str[index] << 16);
	if (str[++index] && (result & 0x800000))	result |= (str[index] << 24);
	return (result);
}

#accessor 	(t_utf8* str)[size_t index] => t_utf8 = \
	String_Get_UTF8(str, index)

// usage example:
char* str = "char Ã±";
t_utf8 utf8_char = (t_utf8*)str[5];


// in .h header file
#namespace String
char*	Duplicate(char* str);
#namespace // using the namespace instruction with nothing after it ends the namespace section

...

// in .c source file
char*	String.Duplicate(char* str)
{
	return (Memory.Duplicate(String.Length(str) + 1));
}

char* str = String.Duplicate("foo");


// in .h header file
#namespace Compression.RLE
t_u8*	Compress(t_u8* data, size_t length);
t_u8*	Decompress(t_u8* data);

#namespace Compression.LZ77	// a new `#namespace` directive replaces the previous one, similar to `.section` in ASM
t_u8*	Compress(t_u8* data, size_t length);
t_u8*	Decompress(t_u8* data);

...

// in .c source file
t_u8* decompressed_data_rle = Compression.RLE.Decompress(file);
t_u8* decompressed_data_lz77 = Compression.LZ77.Decompress(file);


// a generic typed namespace can indicate a default type (which will be used if no <T> is written)
#namespace List<T>
// Functions in this namespace cannot really use the generic type directly, they must treat it as opaque

typedef struct list<T>
{
	s_list<T>*	next;
	size_t		item_size;
	T			item;
}				s_list<T>;

...

// usage example:
s_list<char*> const*	string_list;


#namespace List<T>
s_list<T>*	NewItem(T value);
#namespace

char*	str = String.Duplicate("hello world");

// in ++c file, this line:
s_list<char*>*	list = List.NewItem(str);
// ppp infers the type:
s_list<char*>*	list = List<typeof(str)>.NewItem(str);
// resolves 'typeof' operator
s_list<char*>*	list = List<char*>.NewItem(str);
// and finally, transpiles to this C code:
s_list_char_p*	list = List_char_p_NewItem(str);


// A generic typed namespace can have a restricted set of types:
#namespace Math<T = (float|double|fixed|int)>
// Functions using this namespace can have different implementations for each child type
// (this is similar to "template specialization" in C++)

T	Cos(T x);
T	Sin(T x);
T	Tan(T x);

// usage example:
float cosine_float = Math<float>.Cos(value);	// specific implementation for 32-bit floating-point type cos()
double cosine_f64 = Math<double>.Cos(value);	// specific implementation for 64-bit floating-point type cos()
fixed cosine_fixed = Math<fixed>.Cos(value);	// specific implementation for fixed-point type cos()


// in .h header file
#namespace List<T, int N = 10> // example fixed-size linked list generic type, with default size `10`

s_list<T, N>	New(size_t length, T ...);
void			Append(s_list<T, N>* list, s_list<T, N>* element);
s_list<T, N>	Filter(s_list<T, N>* list, (s_list<T, N>* element)=>bool filter);

// usage example:
// in .c source file
s_list<char*, 3> list = List<char*, 3>.New(3, "foo", "bar", "baz");


// in .h header file
#namespace List<T> // by default, 'void*' type will be used

s_list<T>	New(size_t length, T ...);
void		Append(s_list<T> list, s_list<T> element);
s_list<T>	Filter(s_list<T> list, bool (*filter)(s_list<T> element));

// usage example:
// in .c source file
s_list<char*> list = List<char*>.New(3, "foo", "bar", "baz");


// usage example:
void	KeepOnlyEvenNumbers(s_list<int> integers)
{
	s_list<int> only_even = List<int>.Filter(integers,
		bool	filter(s_list<int> element)
		{
			return (element.item % 2 == 0);
		}
	);
}

// NB: when transpiled to C, the 'filter' local function will be in global scope, named:
static bool	KeepOnlyEvenNumbers_filter(s_list<int> element)
{
	return (element.item % 2 == 0);
}


// list concatenation operator
#namespace List<T = void*>
#operator + (s_list<T>* left, s_list<T>* right) => s_list<T> = \
	List<T>.Join(left, right)

// usage example:
s_list<char*> list = List<char*>.New(2, "foo", "bar");
s_list<char*> list = List<char*>.New(2, "bar", "baz");
s_list<char*> concat = list1 + list2; // type inferrence for the operator


// list index get
#namespace List<T = void*>
#accessor (s_list<T>* list)[size_t index] => T = \
	List<T>.Get(list, index)

// usage example:
s_list<char*> list = List<char*>.New(3, "foo", "bar", "baz");
char* str = list[2]; // type inferrence for the accessor


#namespace KeyVal<T>

typedef struct	keyval_<T>
{
	char*	key;
	char*	type;
	T	value;
}				s_keyval<T>;

s_keyval<T>	New(char* key, T value);



#namespace Object<T=void*>

typedef s_keyval<void*>*	t_object;

t_object*	New(size_t items, s_keyval ...);

#accessor (t_object* obj)[char const* key] => T	= \
	Object<T>.Get(obj, key)



t_object* obj = Object.New(3,
	KeyVal<int>.New("index", 1), // = &(s_keyval<int>){ .key="index", .type="int", .value=1 }
	KeyVal<char*>.New("value", "foo"),
	KeyVal<t_object>.New("sub", Object.New(2,
		KeyVal<float>.New("float", 1.5),
		KeyVal<char*>.New("str", "hello")),
);

printf("%s\n", obj<object*>["sub"]<char*>["str"]); // type inferrence cannot be done here


// ++C
#reflect(uint64_t)	type
// transpiles to C:
unsigned long int


// ++C
#reflect(uint64_t)	#type
// transpiles to C:
"unsigned long int"


// ++C
#reflect(uint64_t)	#type #name
// transpiles to C:
"unsigned long int" "uint64_t"


// ++C
struct test
{
	int x;
	int y;
	char* name;
	void (*f)(void);
};

// ++C
int main()
{
	#reflect(struct test) \
	printf("\t%s\t%s\n", #type, #name);
}

// transpiles to C:
int main()
{
	printf("\t%s\t%s\n", "int", "x");
	printf("\t%s\t%s\n", "int", "y");
	printf("\t%s\t%s\n", "char*", "name");
	printf("\t%s\t%s\n", "(void)=>void", "f");
}


// ++C
enum e_test
{
	NONE = 0, // null
	TEST = 1,
	OTHER = 2, // test comment
	COOL = 3,
};

// ++C
int main()
{
	#reflect(enum e_test) \
	printf("\t%s\t%s\n", #value, #type, #name); comment
}

// transpiles to C:
int main()
{
	printf("\t%s\t%s\n", "0", "NONE"); // null
	printf("\t%s\t%s\n", "1", "TEST");
	printf("\t%s\t%s\n", "2", "OTHER"); // test comment
	printf("\t%s\t%s\n", "3", "COOL");
}


#incbin myfile	"./path/to/file.dat"


void		MyFunction(void);
#replace f	MyFunction
int main()
{
	f();
}


void		MyFunction(void);
int main()
{
	MyFunction();
}


// ++C code
#header(__HEADER_H)
// this is a simple test header
void HelloWorld(void);
// ...


// C code
#ifndef __HEADER_H
#define __HEADER_H

#ifdef __cplusplus
extern "C"
{
#endif

// this is a simple test header
void HelloWorld(void);
// ...

#ifdef __cplusplus
}
#endif

#endif


// ++C code
#header
// ...

// transpiled output C code
#ifndef __SRC_UTILS_HEADER_H
#define __SRC_UTILS_HEADER_H
// ...
#endif


#is inline              //!< cross-platform way to use `__attribute__((always_inline, ...))` and/or `inline`
#is noreturn            //!< cross-platform way to use `__attribute__((noreturn, ...))` and/or `_Noreturn`
#is align(4)            //!< cross-platform way to use `__attribute__((align, ...))` and/or `_Alignas`
#is alias(token)        //!< cross-platform way to use `__attribute__((alias, ...))`
#is format(func, 1, 2)  //!< cross-platform way to use `__attribute__((format, ...))`
#is malloc              //!< cross-platform way to use `__attribute__((malloc, ...))`
#is delete              //!< cross-platform way to use `__attribute__((delete, ...))`
#is pure                //!< cross-platform way to use `__attribute__((pure, ...))`
#is packed              //!< cross-platform way to use `__attribute__((packed, ...))`


#is inline
void	MyFunction(void);


// transpiles to:
__attribute__((always_inline)) inline
void*	MyFunction(void);


void			MyFunction(void);
#is alias	func	MyFunction


// transpiles to:
void	MyFunction(void);
#ifdef __GNUC__
void	func(void) __attribute__((weak, alias("MyFunction")));
#else
#define func	MyFunction
#endif


void		MyFunction(void);
#is alias	func	// `func` is an alias for `MyFunction`

extern int my_global_var;
#is alias	my_gv	// `my_gv` is an alias for `my_global_var`


#is packed
typedef struct example
{
	char a;
	int x;
	bool b;
	int y;
}				s_example;


// transpiles to:
__attribute__((packed))
typedef struct example
{
	...


#is pure
char	MyFunction(char c);


// transpiles to:
__attribute__((pure))
char	MyFunction(char c);


#is malloc
char*	MyFunction(void);


// transpiles to:
__attribute__((malloc))
char*	MyFunction(void);


#is format(printf, 1, 2)
void	MyFunction(char* format, ...);


// transpiles to:
__attribute__((format(printf, 1, 2)))
void	MyFunction(char* format, ...);


void*		->	void$
void const*	->	void@


#replace #incbin	<INCBIN($1,$2)>
#replace #packed	<__attribute__((packed))>
#replace #format	<__attribute__((format($1,$2,$3)))>
#replace #alias		<__attribute__((alias(#$1)))>
#replace #align		<__attribute__((aligned($1)))>
#replace #pure		<__attribute__((pure))>
#replace #inline	<__attribute__((always_inline)) inline>
#replace #malloc	<__attribute__((malloc))>
#replace #delete	<__attribute__((delete))>
#replace #unused	<__attribute__((unused))>
