/*============================================================================*/
/*                                            ______________________________  */
/*  libccc_list.h                            |    __    __  ___      _____  | */
/*                                           |   / /\  / /\/ . |\   /  __|\ | */
/*  https://github.com/LexouDuck/libccc.git  |  / /_/ / / / . <_/  |  /___| | */
/*                                           | /___/\/_/ /___-'\   \____/\  | */
/* Comprehensive|Cross-platform|Customizable | \____/\__/\____-'    \____/  | */
/* This source code follows the MIT License. |______________________________| */
/*                                                                            */
/*============================================================================*/

/*! @file libccc_list.h
**	This header defines a simple linked list type and utility functions for it.
**	@addtogroup libccc_list
**	@{
*/

/*
** ************************************************************************** *|
**                                   Includes                                 *|
** ************************************************************************** *|
*/

#include <libccc.h>

/*
** ************************************************************************** *|
**                                 Definitions                                *|
** ************************************************************************** *|
*/


#header __LIBCCC_LIST_H

#namespace List<T=void*>

//! This is a simple linked list struct, with dynamic content type
/*!
**	The 's_list<T>' struct represents one chainlink in the linked-list, so a
**	linked-list with 3 elements would consist of 3 different 's_list<T>' structs,
**	all chained together with their 'next' pointer, and the last element would
**	have this 'next' pointer set to NULL(0)
*/
typedef struct list<T>
{
//	struct list<T>_* prev;	//!< The pointer to the previous item in the list (or NULL if this is the first item)
	struct list<T>_* next;	//!< The pointer to the next item in the list (or NULL if this is the last item)
	t_size           item_size;	//!< The size of the data contained within 'item'
	<T>              item;		//!< The contents of this linked-list element
}	s_list<T>;

#define foreach_s_list<T>_init(			TYPE, VAR, LIST)	foreach_s_list<T>_init_1(TYPE, VAR, LIST); foreach_s_list<T>_init_2(TYPE, VAR, LIST);
#define foreach_s_list<T>_init_1(		TYPE, VAR, LIST)	t_size VAR##_i = 0
#define foreach_s_list<T>_init_2(		TYPE, VAR, LIST)	s_list<T>* VAR##_lst = (LIST)
#define foreach_s_list<T>_exit(			TYPE, VAR, LIST)	if (LIST)
#define foreach_s_list<T>_loop_init(	TYPE, VAR, LIST)	TYPE VAR = (TYPE)((LIST)->item)
#define foreach_s_list<T>_loop_exit(	TYPE, VAR, LIST)	VAR##_lst != NULL
#define foreach_s_list<T>_loop_incr(	TYPE, VAR, LIST)	++VAR##_i, foreach_s_list<T>_loop_incr_1(TYPE, VAR, LIST), foreach_s_list<T>_loop_incr_2(TYPE, VAR, LIST)
#define foreach_s_list<T>_loop_incr_1(	TYPE, VAR, LIST)	VAR##_lst = VAR##_lst->next
#define foreach_s_list<T>_loop_incr_2(	TYPE, VAR, LIST)	VAR = (VAR##_lst ? (TYPE)(VAR##_lst->item) : NULL)

//! A literal of an 's_list<T>' struct which has all fields set to zero
#define LIST_NULL	(s_list<T>){ .next = NULL, .item_size = 0, .item = (T)0 }



/* TODO function pointer types
**	typedef void	(*f_list_delete)	(T, t_size)
**	typedef void	(*f_list_iterate)	(s_list<T>*)
**	typedef s_list<T>*	(*f_list_map)	(s_list<T>*)
*/



/*
** ************************************************************************** *|
**                             Basic List Operations                          *|
** ************************************************************************** *|
*/

//! Allocates and returns a list element from the given 'item' pointer and 'item_size'
/*!
**	Allocates a new linked list element, and feeds it the given 'item' pointer
**	and the given 'item_size' (if 'item' is NULL, item_size is set to 0).
**	The 'prev' and 'next' pointers are both set to NULL.
**
**	@param	item		A pointer to the data/value to store in this list
**	@param	item_size	The size (in bytes) of the data in question
**	@returns the linked-list element containing the given data
*/
s_list<T>*				List<T>.New(T item, t_size item_size);
#define c_lstnew		List<T>.New

//! Inserts the given element 'elem' to the beginning of the list starting at 'a_lst'
/*!
**	Inserts a new element 'elem' into the list at the address 'a_lst',
**	chaining this new element with the next element of this list
**	(ie: this function will set the 'next' pointer to '*a_lst',
**	and '(*a_lst)->prev' will be set to 'elem').
**
**	@param	a_lst	The address ('&') of the beginning of the list (the address of the first item)
**	@param	elem	The list element to prepend to 'alst' - if NULL, this function does nothing
*/
void					List<T>.Prepend(s_list<T>* *a_lst, s_list<T>* elem);
#define c_lstprepend	List<T>.Prepend
#define c_lstadd		List<T>.Prepend

//! Appends the given element 'elem' to the end of the list starting at 'a_lst'
/*!
**	Appends the given element 'elem' to the end of the list starting at '*a_lst'.
**	If '*a_lst' is NULL, it'll append 'elem' at index 0, creating a 1-elem list.
**
**	@param	a_lst	The address ('&') of the beginning of the list (the address of the first item)
**	@param	elem	The list element to prepend to 'alst' - if NULL, this function does nothing
*/
void					List<T>.Append(s_list<T>* *a_lst, s_list<T>* elem);
#define c_lstappend		List<T>.Append

//! Inserts the given element 'elem' at the given 'index' of the list starting at 'a_lst'
/*!
**	Inserts the given element 'elem' at the given 'index' of the list '*a_lst'.
**	If 'index' is too large, the 'elem' is appended to the end of the list.
**	If 'elem' is NULL, then nothing is done by this function.
**
**	@param	a_lst	The address ('&') of the beginning of the list (the address of the first item)
**	@param	elem	The list element to prepend to 'alst' - if NULL, this function does nothing
*/
void					List<T>.Insert(s_list<T>* *a_lst, s_list<T>* elem, t_u32 index);
#define c_lstinsert		List<T>.Insert

//! Returns a "shallow copy" of the given list 'lst' (copies only pointers, not the underlying data)
/*!
**	@param	lst		The list to copy
**	@returns a newly allocated copy of the given linked list 'lst'.
**	The underlying data is not copied, only the s_list<T>* structs are malloc'ed.
*/
s_list<T>*				List<T>.Copy(s_list<T> const* lst);
#define c_lstcpy		List<T>.Copy

//! Returns a "deep copy" of the given list 'lst' (copies s_list<T> structs, and the data in 'item')
/*!
**	@param	lst		The list to duplicate
**	@returns a newly allocated copy of the given linked list 'lst'.
**	The underlying data 'item' for each element will be allocated and copied, according to 'item_size'
*/
s_list<T>*				List<T>.Duplicate(s_list<T> const* lst);
#define c_lstdup		List<T>.Duplicate



/*
** ************************************************************************** *|
**                             Deletion Operations                            *|
** ************************************************************************** *|
*/

//! Deletes the given element pointed to by 'a_lst' using the given 'del()' function.
/*!
**	Deletes the given element pointed to by 'a_lst' with the given 'del()' function,
**	and then frees memory and sets '*a_lst' to the old value of '*a_lst->next'.
**	So, the linked list remains "chained together" after removing an element in the middle.
*/
void					List<T>.Remove(s_list<T>* *a_lst, void (*del)(T, t_size));
#define c_lstdelone		List<T>.Remove

//! Deletes all the elements in the list starting at 'a_lst', using the given 'del()' function.
/*!
**	Deletes all the elements in the list starting at '*a_lst',
**	calls 'del' and frees memory for each, and lastly sets '*a_lst' as NULL.
**
**	@param	a_lst	The address ('&') of the beginning of the list (the address of the first item)
*/
void					List<T>.Delete(s_list<T>* *a_lst, void (*del)(T, t_size));
#define c_lstdel		List<T>.Delete

//! Deletes the given element pointed to by 'a_lst' using the given 'del()' function.
/*!
**	Deletes the last element in the list starting at '*a_lst', calling 'del'
**	and freeing that element, and setting the preceding 'lst->next' as NULL.
*/
void					List<T>.Pop(s_list<T>* *a_lst, void (*del)(T, t_size));
#define c_lstpop		List<T>.Pop



/*
** ************************************************************************** *|
**                                 List Checks                                *|
** ************************************************************************** *|
*/

//! Returns the amount of elements in the given list 'lst'
/*!
**	@param	lst		the list to look through
**	@returns the amount of elements in the given list 'lst',
**	by traversing it, looping through every 'next' pointer.
*/
t_u32					List<T>.Size(s_list<T> const* lst);
#define c_lstsize		List<T>.Size

//! Gets the element at position 'index' in the list, and returns it
/*!
**	@param	lst		the list to look through
**	@param	index	the index in the list of the element to get
**	@returns the 'index'th element in the given list 'lst'.
**	Will return NULL if 'index' is beyond the last element.
*/
s_list<T>*				List<T>.Get(s_list<T> const* lst, t_u32 index);
#define c_lstget		List<T>.Get

//! Returns the first encountered item in the given list 'lst' matching the given 'query'
/*!
**	@param	lst		the list to look through
**	@param	query	the 'item' pointer to match against
**	@returns the first encountered element of the given linked list 'lst'
**	for which (lst.item == query), matching only the pointers, not the data.
*/
s_list<T>*				List<T>.Find(s_list<T> const* lst, void const* query);
#define c_lstfind		List<T>.Find



/*
** ************************************************************************** *|
**                             Other List Operations                          *|
** ************************************************************************** *|
*/

//! Returns a "shallow copy" of a subsection of the given list 'lst', starting at 'index' and taking 'n' elements
/*!
**	Returns a newly allocated subsection of the given list 'lst',
**	starting at 'index', and copying 'n' list elements (not their 'item' data).
**	Will return NULL if 'index' is too large or if 'n' is 0.
**	If 'index' is valid but the list is not large enough for 'n',
**	then the resulting list will have fewer than 'n' elements.
*/
s_list<T>*				List<T>.Sub(s_list<T>* lst, t_u32 index, t_u32 n);
#define c_lstsub		List<T>.Sub

//! Iterates upon each element of the given list 'lst', applying the given function 'f' to each of its elements.
/*!
**	Iterates upon each element of the given list 'lst',
**	applying the given function 'f' to each of its elements.
*/
void					List<T>.Iterate(s_list<T>* lst, void (*f)(s_list<T>* elem));
#define c_lstiter		List<T>.Iterate
void					List<T>.Iterate_I(s_list<T>* lst, void (*f)(s_list<T>* elem, t_u32 index));
#define c_lstiteri		List<T>.Iterate_I

//! Creates a new list which is the result of applying the given function 'f' to each element of 'lst'.
/*!
**	Creates a new list which is the result of applying
**	the given function 'f' to each element of 'lst'.
*/
s_list<T>*				List<T>.Map(s_list<T>* lst, s_list<T> *(*f)(s_list<T>* elem));
#define c_lstmap		List<T>.Map
s_list<T>*				List<T>.Map_I(s_list<T>* lst, s_list<T> *(*f)(s_list<T>* elem, t_u32 index));
#define c_lstmapi		List<T>.Map_I

//! Converts the given list at address 'a_lst' to a NULL-terminated pointer array
/*!
**	Creates a new jagged array (2D pointer array) from the given list '*a_lst'.
**	The top-level pointer array is terminated by a NULL pointer.
**	The underlying 'lst->item' data is not copied, only the pointers are.
*/
T*						List<T>.To_PointerArray(s_list<T> const** a_lst);
#define c_lst_to_ptrarr	List<T>.To_PointerArray

//! Converts the given list at address 'a_lst' to a array
/*!
**	Creates a new contiguous memory array from the given linked list.
**	It sets this array pointer to the 'items' pointer of the given 'array'.
**	It also sets the 'item_size' and 'length' fields of this 'array'.
**
**	@returns the resulting 's_array' struct from the given list, or NULL
**		if any elements of '*a_lst' are of unequal 'lst->item_size'.
*/
s_array					List<T>.To_Array(s_list<T> const** a_lst);
#define c_lst_to_array	List<T>.To_Array



}
/*! @} */
