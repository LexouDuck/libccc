#!/bin/sh -e

#! utility variables & functions for colored terminal output

ansi_esc()      { printf "\033[""$@""m" ; }
ansi_color_fg() { printf "\033[38;5;""$@""m" ; }
ansi_color_bg() { printf "\033[48;5;""$@""m" ; }
# reset text style to default
io_reset="`     ansi_esc 0`"
# set text style
io_bold="`      ansi_esc 1`"
io_underline="` ansi_esc 4`"
# set text color (foreground)
io_red="`       ansi_esc 31`"
io_green="`     ansi_esc 32`"
io_yellow="`    ansi_esc 33`"
io_blue="`      ansi_esc 34`"
io_magenta="`   ansi_esc 35`"
io_cyan="`      ansi_esc 36`"

print_verbose() {
if $verbose; then { printf "%s%s%s%s\n" "$io_blue"   "verbose" "$io_reset: " "$@" ; } >&2 ; fi ; }
print_message() { { printf "%s%s%s%s\n" "$io_blue"   "message" "$io_reset: " "$@" ; } >&2 ; }
print_warning() { { printf "%s%s%s%s\n" "$io_yellow" "warning" "$io_reset: " "$@" ; } >&2 ; }
print_success() { { printf "%s%s%s%s\n" "$io_green"  "success" "$io_reset: " "$@" ; } >&2 ; }
print_failure() { { printf "%s%s%s%s\n" "$io_red"    "failure" "$io_reset: " "$@" ; } >&2 ; }
print_error()   { { printf "%s%s%s%s\n" "$io_red"    "error"   "$io_reset: " "$@" ; } >&2 ; exit 1 ; }



# get commit hashes from stdin
while read line
do
	LINE=${line}
done
OLD=`echo $LINE | cut -d ' ' -f 4`
NEW=`echo $LINE | cut -d ' ' -f 2`
if [ -z "$NEW" ]
then print_error "Invalid commit revision hash, cannot do 'git push'."
fi
printf "old commit: $OLD\n"
printf "new commit: $NEW\n"

# get list of files with changes between the OLD and NEW commits
CHANGED="` git diff $OLD..$NEW --name-only || echo '' `" # | awk '{ print "\"" $0 "\"" } ' | tr '\n' ' '`
print_message "Files changed:"
printf "$io_cyan""$CHANGED""$io_reset""\n"

# TODO: run code style formatter ?

exit 0
