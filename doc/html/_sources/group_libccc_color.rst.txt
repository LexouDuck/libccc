.. index:: pair: group; 11) libccc/color
.. _doxid-group__libccc__color:

11) libccc/color
================

.. toctree::
	:hidden:

	struct_s_ahsl_.rst
	struct_s_argb_.rst

Overview
~~~~~~~~

This header defines all the functions/bitmasks for encoding colors in ints. :ref:`More...<details-group__libccc__color>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// typedefs

	typedef t_u16 :ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>`;
	typedef t_u32 :ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>`;
	typedef struct :ref:`s_argb_<doxid-structs__argb__>` :ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`;
	typedef struct :ref:`s_ahsl_<doxid-structs__ahsl__>` :ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`;

	// structs

	struct :ref:`s_ahsl_<doxid-structs__ahsl__>`;
	struct :ref:`s_argb_<doxid-structs__argb__>`;

	// global functions

	t_u8 :ref:`Color_ARGB16_Get_A<doxid-group__libccc__color_1gafe75c0d3bcf96ecf3803296b36c05af0>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color);
	t_u8 :ref:`Color_ARGB16_Get_R<doxid-group__libccc__color_1ga3f3c11f80b8c470cf66dbb1709949801>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color);
	t_u8 :ref:`Color_ARGB16_Get_G<doxid-group__libccc__color_1ga6148c224ae94f60ebec2dd279d915531>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color);
	t_u8 :ref:`Color_ARGB16_Get_B<doxid-group__libccc__color_1gabfd33ef1e812ddb98e40183c4edea5f7>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color);
	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` :ref:`Color_ARGB16_Set<doxid-group__libccc__color_1ga48310eef5d974dd37adc5b39a2edeb24>`(t_u8 a, t_u8 r, t_u8 g, t_u8 b);
	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` :ref:`Color_ARGB16_Set_A<doxid-group__libccc__color_1ga5ed67ed30f6a077d6db3f2f723dacd48>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color, :ref:`t_bool<doxid-group__libccc__bool_1gaf15d2c7169c336f97175a2e218d22e73>` a);
	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` :ref:`Color_ARGB16_Set_R<doxid-group__libccc__color_1ga439c0aa8649c63c5686417009b6f6e1f>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color, t_u8 r);
	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` :ref:`Color_ARGB16_Set_G<doxid-group__libccc__color_1ga011f3f1b31d30e83355b9b8330c19c5d>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color, t_u8 g);
	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` :ref:`Color_ARGB16_Set_B<doxid-group__libccc__color_1ga86ec09537f5c9a721cb7562eddeb70e8>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color, t_u8 b);
	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` :ref:`Color_ARGB16_To_ARGB32<doxid-group__libccc__color_1ga6d569e092e91018dfa68554a2c9215a2>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color);
	:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` :ref:`Color_ARGB16_To_ARGB<doxid-group__libccc__color_1gae7f85a5401a95c432a11268c635eb14b>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color);
	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>`* :ref:`Color_ARGB16_GetNearest<doxid-group__libccc__color_1gad887b06f9628af01d477cc04f23685ce>`(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` target, :ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>`* colors, :ref:`t_size<doxid-group__libccc__pointer_1gab26ea4b5e8504781be1c368c28967472>` n);
	t_u8 :ref:`Color_ARGB32_Get_A<doxid-group__libccc__color_1ga3e3258a2239cad8538c47e237c7acf71>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color);
	t_u8 :ref:`Color_ARGB32_Get_R<doxid-group__libccc__color_1ga560ff42a09fd61a65cb9614bb6fc18e1>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color);
	t_u8 :ref:`Color_ARGB32_Get_G<doxid-group__libccc__color_1gab11a548ed1d7e28fbb5eb8ea3497d48f>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color);
	t_u8 :ref:`Color_ARGB32_Get_B<doxid-group__libccc__color_1gabd13591d4ea62d3ae108fdfc868bd6a0>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color);
	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` :ref:`Color_ARGB32_Set<doxid-group__libccc__color_1gad63b4cabf7587cd710a3e3d1432d92ed>`(t_u8 a, t_u8 r, t_u8 g, t_u8 b);
	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` :ref:`Color_ARGB32_Set_A<doxid-group__libccc__color_1ga0983a09c9b81eab6b4a31cf620b1b5ea>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color, t_u8 a);
	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` :ref:`Color_ARGB32_Set_R<doxid-group__libccc__color_1ga969be09f3f5450a5591eaec741c5f568>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color, t_u8 r);
	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` :ref:`Color_ARGB32_Set_G<doxid-group__libccc__color_1gae6b9ec3c80b30061619631e290953e51>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color, t_u8 g);
	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` :ref:`Color_ARGB32_Set_B<doxid-group__libccc__color_1gafcd6b5811057adc6514928bcc2a84f2d>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color, t_u8 b);
	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` :ref:`Color_ARGB32_To_ARGB16<doxid-group__libccc__color_1ga77c15aa66b48ac08d54b53d4eef69112>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color);
	:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` :ref:`Color_ARGB32_To_ARGB<doxid-group__libccc__color_1gaf9b8afe46953295cca1a4696a0bada76>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color);
	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>`* :ref:`Color_ARGB32_GetNearest<doxid-group__libccc__color_1ga0ddb82050b94d61cb51541cbdc26a604>`(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` target, :ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>`* colors, :ref:`t_size<doxid-group__libccc__pointer_1gab26ea4b5e8504781be1c368c28967472>` n);
	:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` :ref:`Color_ARGB_Set<doxid-group__libccc__color_1ga3b62dab4a5263f9cedcc56b4a3ee8f57>`(:ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` a, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` r, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` g, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` b);
	void :ref:`Color_ARGB_Set_A<doxid-group__libccc__color_1gaada2d1dc436d21ea58de72fa2d13b6f9>`(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` a);
	void :ref:`Color_ARGB_Set_R<doxid-group__libccc__color_1gac88872a49777a81dbb64e3c3914201a4>`(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` r);
	void :ref:`Color_ARGB_Set_G<doxid-group__libccc__color_1ga838b3311f250a4f76ab0e881d0553f1c>`(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` g);
	void :ref:`Color_ARGB_Set_B<doxid-group__libccc__color_1ga330d2cf921f97fdfc382b6037437822d>`(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` b);
	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` :ref:`Color_ARGB_To_ARGB16<doxid-group__libccc__color_1gacb35536aa6188fafe3accb60e2576a71>`(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` const* color);
	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` :ref:`Color_ARGB_To_ARGB32<doxid-group__libccc__color_1gaea403e694ddc5402b57570fd29e014f0>`(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` const* color);
	:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>` :ref:`Color_ARGB_To_AHSL<doxid-group__libccc__color_1gacdc502819c7ddf76dc58d3244d50f4c7>`(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` const* color);
	:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* :ref:`Color_ARGB_GetNearest<doxid-group__libccc__color_1gaf2509ab3ae77194f030976bd3bf3bc59>`(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` target, :ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* colors, :ref:`t_size<doxid-group__libccc__pointer_1gab26ea4b5e8504781be1c368c28967472>` n);
	:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>` :ref:`Color_AHSL_Set<doxid-group__libccc__color_1gaec863ed1e119f4a30fd3fad71c2e85e6>`(:ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` a, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` hue, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` sat, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` lum);
	void :ref:`Color_AHSL_Set_A<doxid-group__libccc__color_1ga253a7298c2e069bce7a9ed64fdb6b279>`(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` a);
	void :ref:`Color_AHSL_Set_H<doxid-group__libccc__color_1ga93e8d7a13864b658d5202a5fbea5eba0>`(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` hue);
	void :ref:`Color_AHSL_Set_S<doxid-group__libccc__color_1gacca2bc25cdb6548e1b7a2d0f6767fcb0>`(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` sat);
	void :ref:`Color_AHSL_Set_L<doxid-group__libccc__color_1ga9a8db3c8e1900761e8d17d78850e7ada>`(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` lum);
	:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` :ref:`Color_AHSL_To_ARGB<doxid-group__libccc__color_1ga2b1930a815ebed2dd70dfd9c516c6273>`(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>` const* color);
	:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* :ref:`Color_AHSL_GetNearest<doxid-group__libccc__color_1ga3c0edb628eb0662498f478ee56fdb1c2>`(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>` target, :ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* colors, :ref:`t_size<doxid-group__libccc__pointer_1gab26ea4b5e8504781be1c368c28967472>` n);

	// macros

	#define :ref:`COLOR_ARGB16_A<doxid-group__libccc__color_1ga255ba37b7dfeaf9c02d727896d4e1707>`
	#define :ref:`COLOR_ARGB16_A_BITINDEX<doxid-group__libccc__color_1ga78b1bc17e23c9f4239d79b8bcb742154>`
	#define :ref:`COLOR_ARGB16_B<doxid-group__libccc__color_1ga8e7bf3b9769ab90051bdaec2b8dddd43>`
	#define :ref:`COLOR_ARGB16_B_BITINDEX<doxid-group__libccc__color_1gac61ab29341fcd6e8017f0c28f08875e0>`
	#define :ref:`COLOR_ARGB16_CHANNEL<doxid-group__libccc__color_1ga1244cd1f438f78e48f52f96394d09125>`
	#define :ref:`COLOR_ARGB16_G<doxid-group__libccc__color_1ga778f96f46511b9a5784f25deb1a7e2af>`
	#define :ref:`COLOR_ARGB16_G_BITINDEX<doxid-group__libccc__color_1ga3d80c01d2f38894868262b10b052ca07>`
	#define :ref:`COLOR_ARGB16_R<doxid-group__libccc__color_1ga1b7bce0a3191d73cbe19c2d4cec7fa1b>`
	#define :ref:`COLOR_ARGB16_R_BITINDEX<doxid-group__libccc__color_1gabc339153320653873a3a6ba96a74af37>`
	#define :ref:`COLOR_ARGB32_A<doxid-group__libccc__color_1ga0dbf2be1e88684220017ba610970d2c0>`
	#define :ref:`COLOR_ARGB32_A_BITINDEX<doxid-group__libccc__color_1ga10ecb3d73f55ab45344ca3a096ab5ba3>`
	#define :ref:`COLOR_ARGB32_B<doxid-group__libccc__color_1gac4783a8cb1ed7522e7c2577eeb9bd3d2>`
	#define :ref:`COLOR_ARGB32_B_BITINDEX<doxid-group__libccc__color_1gad67507373189b4fe7ceedb8f8ded03fc>`
	#define :ref:`COLOR_ARGB32_CHANNEL<doxid-group__libccc__color_1ga3ba45d610ad8618a0143331d688b2fe8>`
	#define :ref:`COLOR_ARGB32_G<doxid-group__libccc__color_1gaeb63f74062ebe75c6b1007ae338b9d3d>`
	#define :ref:`COLOR_ARGB32_G_BITINDEX<doxid-group__libccc__color_1ga6fadd9ca01d3591e4756617c1a423a18>`
	#define :ref:`COLOR_ARGB32_R<doxid-group__libccc__color_1gab95791a4496c7541b4c06e73d20001d9>`
	#define :ref:`COLOR_ARGB32_R_BITINDEX<doxid-group__libccc__color_1ga8d54b93a72cc572c49742e8171f068f2>`
	#define :target:`Color_AHSL_Set_Alpha<doxid-group__libccc__color_1gad0cbff34a2f53ee7fc6be4ef51f7d542>`
	#define :target:`Color_AHSL_Set_Hue<doxid-group__libccc__color_1gac42473c8f8250cfb1f9a232110f7a77e>`
	#define :target:`Color_AHSL_Set_Lum<doxid-group__libccc__color_1ga393d4f202be99d2ffc4ea569b7530a85>`
	#define :target:`Color_AHSL_Set_Sat<doxid-group__libccc__color_1ga3112dcf8985f06dff4f114e2f41435d6>`
	#define :target:`Color_ARGB16_Get_Alpha<doxid-group__libccc__color_1ga24fe508b9a04d0a1759cd66a00252c8d>`
	#define :target:`Color_ARGB16_Get_Blue<doxid-group__libccc__color_1gad44996fe1f2984ddc9689677abe9db23>`
	#define :target:`Color_ARGB16_Get_Green<doxid-group__libccc__color_1gaf26ccce00a7de581821e9fbeda7707e1>`
	#define :target:`Color_ARGB16_Get_Red<doxid-group__libccc__color_1gacd4357c487dab4931afb2522a9c79c02>`
	#define :target:`Color_ARGB16_Set_Alpha<doxid-group__libccc__color_1gab267dbf4b18075ade7f9cb0502773da2>`
	#define :target:`Color_ARGB16_Set_Blue<doxid-group__libccc__color_1ga96e71cd1440b5b25518561c749f59aa5>`
	#define :target:`Color_ARGB16_Set_Green<doxid-group__libccc__color_1ga58444c156371a35ed624c7bb63a2b0b4>`
	#define :target:`Color_ARGB16_Set_Red<doxid-group__libccc__color_1gaf99e2f1d5d5dc0373707ed720723261b>`
	#define :target:`Color_ARGB32_Get_Alpha<doxid-group__libccc__color_1gac1faee1dc42738380b6a9c28ae7d2770>`
	#define :target:`Color_ARGB32_Get_Blue<doxid-group__libccc__color_1gaaf2690282ce1b617caad4da7a7999098>`
	#define :target:`Color_ARGB32_Get_Green<doxid-group__libccc__color_1ga3d07cd1ef26551a780178bd33a7bb162>`
	#define :target:`Color_ARGB32_Get_Red<doxid-group__libccc__color_1gaf5c71f3c858e057c8425d1a3bfbc0b82>`
	#define :target:`Color_ARGB32_Set_Alpha<doxid-group__libccc__color_1ga034e413d5c41781b62517a00e3ff6fc3>`
	#define :target:`Color_ARGB32_Set_Blue<doxid-group__libccc__color_1ga94c4e21d7f73a4f76e90a8dd50ac74dc>`
	#define :target:`Color_ARGB32_Set_Green<doxid-group__libccc__color_1ga0c81f36130d7a6d8c714ea3195c92c72>`
	#define :target:`Color_ARGB32_Set_Red<doxid-group__libccc__color_1ga3ac817ac997009fb677dd8148c512a73>`
	#define :target:`Color_ARGB_Set_Alpha<doxid-group__libccc__color_1ga94979ef2a7ab8a646f09d97538198a8b>`
	#define :target:`Color_ARGB_Set_Blue<doxid-group__libccc__color_1ga56dc824dd66bf75a1c7fdbeee1e9d674>`
	#define :target:`Color_ARGB_Set_Green<doxid-group__libccc__color_1gad773688007418e13376a82c1c09a12d8>`
	#define :target:`Color_ARGB_Set_Red<doxid-group__libccc__color_1ga4a415b2d2fe15d4983f1f652f0475093>`
	#define :target:`c_color_ahsl_nearest<doxid-group__libccc__color_1ga5933396d553bafd67289c7f388435d71>`
	#define :target:`c_color_ahsl_set<doxid-group__libccc__color_1gac6d6bcff90a32d34ba769cb81f140009>`
	#define :target:`c_color_ahsl_set_a<doxid-group__libccc__color_1gafc117b2883f33486c789d3b128711372>`
	#define :target:`c_color_ahsl_set_h<doxid-group__libccc__color_1gad6e51864503cba58b13baa6822e86cf5>`
	#define :target:`c_color_ahsl_set_l<doxid-group__libccc__color_1gabcbaed4d44de6f279b44f57d054e1471>`
	#define :target:`c_color_ahsl_set_s<doxid-group__libccc__color_1ga790f92860f179264b6b714d4960cdd42>`
	#define :target:`c_color_ahsl_to_argb<doxid-group__libccc__color_1ga428840c0277a1c60bf0298d1d2ba3ab7>`
	#define :target:`c_color_argb16_get_a<doxid-group__libccc__color_1gacb129025bd180c71d867f94de526be9d>`
	#define :target:`c_color_argb16_get_b<doxid-group__libccc__color_1ga198605f547807de16762f8778e58e7fb>`
	#define :target:`c_color_argb16_get_g<doxid-group__libccc__color_1ga982b34b766bbe8bba341c31d57dd0071>`
	#define :target:`c_color_argb16_get_r<doxid-group__libccc__color_1gadcc51c88ace83c9e198e644fe886b486>`
	#define :target:`c_color_argb16_nearest<doxid-group__libccc__color_1ga3f2179f4a52c57f351f1424f1787856e>`
	#define :target:`c_color_argb16_set<doxid-group__libccc__color_1ga94cb9a13ba3506c8d5a96332fc1c58ba>`
	#define :target:`c_color_argb16_set_a<doxid-group__libccc__color_1gad59446ba8b28394eb041d6d8181af90c>`
	#define :target:`c_color_argb16_set_b<doxid-group__libccc__color_1ga9a33895fee2f464b5534a6c6537bc5db>`
	#define :target:`c_color_argb16_set_g<doxid-group__libccc__color_1gae1221da67aa489eb7b7cfd9b6a12eb99>`
	#define :target:`c_color_argb16_set_r<doxid-group__libccc__color_1ga69375a75564267aa8fac789aa83ef17e>`
	#define :target:`c_color_argb16_to_argb<doxid-group__libccc__color_1gabb929c8d388a4ce16c8a0ae50c20a46f>`
	#define :target:`c_color_argb16_to_argb32<doxid-group__libccc__color_1ga1b884a4672fbc8f0b6536c73dfd4e594>`
	#define :target:`c_color_argb32_get_a<doxid-group__libccc__color_1ga8b3e0da8eaac8abccb0b256b85e79b3b>`
	#define :target:`c_color_argb32_get_b<doxid-group__libccc__color_1ga88eb443d321cbb5be2b75bbd7cba6462>`
	#define :target:`c_color_argb32_get_g<doxid-group__libccc__color_1gac8dfa40a7606c22fd6c15be9ac5cb38c>`
	#define :target:`c_color_argb32_get_r<doxid-group__libccc__color_1ga41175325506c153fd2e30dbc1e37cdc2>`
	#define :target:`c_color_argb32_nearest<doxid-group__libccc__color_1ga5ec46f8559a94d04272229d06841ca04>`
	#define :target:`c_color_argb32_set<doxid-group__libccc__color_1gabac488f6224ccb0cbb5ee3604b45583b>`
	#define :target:`c_color_argb32_set_a<doxid-group__libccc__color_1ga2fa5ab88e0d62fec835e7e8986b11c37>`
	#define :target:`c_color_argb32_set_b<doxid-group__libccc__color_1gadc89325fee67a2b945bfe96a665a9828>`
	#define :target:`c_color_argb32_set_g<doxid-group__libccc__color_1gab3e6669cfd09147918ba76ea5955e9ec>`
	#define :target:`c_color_argb32_set_r<doxid-group__libccc__color_1ga618e7365023daaa618965a65b5765301>`
	#define :target:`c_color_argb32_to_argb<doxid-group__libccc__color_1ga9d4c00a28026a4a362264088a6d4c6b7>`
	#define :target:`c_color_argb32_to_argb16<doxid-group__libccc__color_1ga2bde2fb54a47a31c44431cf27af47546>`
	#define :target:`c_color_argb_nearest<doxid-group__libccc__color_1gaa191195599b4a1dc537552cd9d63b1c1>`
	#define :target:`c_color_argb_set<doxid-group__libccc__color_1ga38e020a4595b15837485bc31ee9c9fc6>`
	#define :target:`c_color_argb_set_a<doxid-group__libccc__color_1ga89c6ea5ef5b785b7b5b2ec7a4ad31d2c>`
	#define :target:`c_color_argb_set_b<doxid-group__libccc__color_1gaf58d255a0511738846ca532aefc405df>`
	#define :target:`c_color_argb_set_g<doxid-group__libccc__color_1ga22bdc46d3c4d883bd7b36657c5e43e55>`
	#define :target:`c_color_argb_set_r<doxid-group__libccc__color_1ga0e3f00950d67d2ea8a01f75c9bf8ced1>`
	#define :target:`c_color_argb_to_ahsl<doxid-group__libccc__color_1gadf30aa93c6db55918eaf905f31b5d927>`
	#define :target:`c_color_argb_to_argb16<doxid-group__libccc__color_1gabccf701498800a3cc07718a8b410de20>`
	#define :target:`c_color_argb_to_argb32<doxid-group__libccc__color_1gae40fe6167a1762c9e99c3ec941436dc8>`

.. _details-group__libccc__color:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This header defines all the functions/bitmasks for encoding colors in ints.

Typedefs
--------

.. index:: pair: typedef; t_argb16
.. _doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef t_u16 t_argb16

This type represents an unsigned 16-bit number which stores an ARGB 1555 color.

.. index:: pair: typedef; t_argb32
.. _doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef t_u32 t_argb32

This type represents an unsigned 32-bit number which stores an ARGB 8888 color.

.. index:: pair: typedef; s_argb
.. _doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct :ref:`s_argb_<doxid-structs__argb__>` s_argb

A struct to store color values with each channel (alpha,red,green,blue) as floating-point values in the interval [0,1].

.. index:: pair: typedef; s_ahsl
.. _doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	typedef struct :ref:`s_ahsl_<doxid-structs__ahsl__>` s_ahsl

A struct to store color values with each channel (alpha,hue,sat,lum) as floating-point values in the interval [0,1].

Global Functions
----------------

.. index:: pair: function; Color_ARGB16_Get_A
.. _doxid-group__libccc__color_1gafe75c0d3bcf96ecf3803296b36c05af0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	t_u8 Color_ARGB16_Get_A(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color)

Gets the alpha channel value for the given 16-bit 'color'.

.. index:: pair: function; Color_ARGB16_Get_R
.. _doxid-group__libccc__color_1ga3f3c11f80b8c470cf66dbb1709949801:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	t_u8 Color_ARGB16_Get_R(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color)

Gets the red channel value for the given 16-bit 'color'.

.. index:: pair: function; Color_ARGB16_Get_G
.. _doxid-group__libccc__color_1ga6148c224ae94f60ebec2dd279d915531:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	t_u8 Color_ARGB16_Get_G(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color)

Gets the green channel value for the given 16-bit 'color'.

.. index:: pair: function; Color_ARGB16_Get_B
.. _doxid-group__libccc__color_1gabfd33ef1e812ddb98e40183c4edea5f7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	t_u8 Color_ARGB16_Get_B(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color)

Gets the blue channel value for the given 16-bit 'color'.

.. index:: pair: function; Color_ARGB16_Set
.. _doxid-group__libccc__color_1ga48310eef5d974dd37adc5b39a2edeb24:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` Color_ARGB16_Set(t_u8 a, t_u8 r, t_u8 g, t_u8 b)

Create a 16-bit color from the given channel values.

This function creates a new uint color value from the four given individual color channel values.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- The alpha channel value (0-1)

	*
		- r

		- The red channel value (0-31)

	*
		- g

		- The green channel value (0-31)

	*
		- b

		- The blue channel value (0-31)



.. rubric:: Returns:

the 16-bit color value from the given channel values

.. index:: pair: function; Color_ARGB16_Set_A
.. _doxid-group__libccc__color_1ga5ed67ed30f6a077d6db3f2f723dacd48:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` Color_ARGB16_Set_A(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color, :ref:`t_bool<doxid-group__libccc__bool_1gaf15d2c7169c336f97175a2e218d22e73>` a)

Returns the given 16-bit 'color', with the 'a' alpha channel value changed.

.. index:: pair: function; Color_ARGB16_Set_R
.. _doxid-group__libccc__color_1ga439c0aa8649c63c5686417009b6f6e1f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` Color_ARGB16_Set_R(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color, t_u8 r)

Returns the given 16-bit 'color', with the 'r' red channel value changed.

.. index:: pair: function; Color_ARGB16_Set_G
.. _doxid-group__libccc__color_1ga011f3f1b31d30e83355b9b8330c19c5d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` Color_ARGB16_Set_G(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color, t_u8 g)

Returns the given 16-bit 'color', with the 'g' green channel value changed.

.. index:: pair: function; Color_ARGB16_Set_B
.. _doxid-group__libccc__color_1ga86ec09537f5c9a721cb7562eddeb70e8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` Color_ARGB16_Set_B(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color, t_u8 b)

Returns the given 16-bit 'color', with the 'b' blue channel value changed.

.. index:: pair: function; Color_ARGB16_To_ARGB32
.. _doxid-group__libccc__color_1ga6d569e092e91018dfa68554a2c9215a2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` Color_ARGB16_To_ARGB32(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color)

Converts the given 16-bit color value to its 32-bit equivalent.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- color

		- The 16-bit color to convert



.. rubric:: Returns:

a 32-bit ARGB color by multiplying the color channel values of the given 16-bit 'color' value.

.. index:: pair: function; Color_ARGB16_To_ARGB
.. _doxid-group__libccc__color_1gae7f85a5401a95c432a11268c635eb14b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` Color_ARGB16_To_ARGB(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` color)

Converts the given 16-bit color value to its float color equivalent.

.. index:: pair: function; Color_ARGB16_GetNearest
.. _doxid-group__libccc__color_1gad887b06f9628af01d477cc04f23685ce:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>`* Color_ARGB16_GetNearest(:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` target, :ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>`* colors, :ref:`t_size<doxid-group__libccc__pointer_1gab26ea4b5e8504781be1c368c28967472>` n)

Find the nearest color to the given 'target' color, from within the given arrays of 'colors'.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- target

		- The desired color, for which the nearest will be returned

	*
		- colors

		- The array of different colors to check against

	*
		- n

		- The amount of colors to check in the 'colors' array



.. rubric:: Returns:

a pointer to the color within 'colors' which is the closest match to the given 'target' color, searching through 'n' colors in the array.

.. index:: pair: function; Color_ARGB32_Get_A
.. _doxid-group__libccc__color_1ga3e3258a2239cad8538c47e237c7acf71:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	t_u8 Color_ARGB32_Get_A(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color)

Gets the alpha channel value for the given 32-bit 'color'.

.. index:: pair: function; Color_ARGB32_Get_R
.. _doxid-group__libccc__color_1ga560ff42a09fd61a65cb9614bb6fc18e1:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	t_u8 Color_ARGB32_Get_R(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color)

Gets the red channel value for the given 32-bit 'color'.

.. index:: pair: function; Color_ARGB32_Get_G
.. _doxid-group__libccc__color_1gab11a548ed1d7e28fbb5eb8ea3497d48f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	t_u8 Color_ARGB32_Get_G(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color)

Gets the green channel value for the given 32-bit 'color'.

.. index:: pair: function; Color_ARGB32_Get_B
.. _doxid-group__libccc__color_1gabd13591d4ea62d3ae108fdfc868bd6a0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	t_u8 Color_ARGB32_Get_B(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color)

Gets the blue channel value for the given 32-bit 'color'.

.. index:: pair: function; Color_ARGB32_Set
.. _doxid-group__libccc__color_1gad63b4cabf7587cd710a3e3d1432d92ed:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` Color_ARGB32_Set(t_u8 a, t_u8 r, t_u8 g, t_u8 b)

Creates a 32-bit color value from the given channel values (alpha, red, green, blue)

This function creates a new 32-bit ARGB color value from the four given color channel 1-byte values.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- The alpha channel value (0-255)

	*
		- r

		- The red channel value (0-255)

	*
		- g

		- The green channel value (0-255)

	*
		- b

		- The blue channel value (0-255)



.. rubric:: Returns:

the 32-bit color value assembled from the given channel values

.. index:: pair: function; Color_ARGB32_Set_A
.. _doxid-group__libccc__color_1ga0983a09c9b81eab6b4a31cf620b1b5ea:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` Color_ARGB32_Set_A(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color, t_u8 a)

Returns the given 32-bit 'color', with the 'a' alpha channel value changed.

.. index:: pair: function; Color_ARGB32_Set_R
.. _doxid-group__libccc__color_1ga969be09f3f5450a5591eaec741c5f568:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` Color_ARGB32_Set_R(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color, t_u8 r)

Returns the given 32-bit 'color', with the 'r' red channel value changed.

.. index:: pair: function; Color_ARGB32_Set_G
.. _doxid-group__libccc__color_1gae6b9ec3c80b30061619631e290953e51:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` Color_ARGB32_Set_G(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color, t_u8 g)

Returns the given 32-bit 'color', with the 'g' green channel value changed.

.. index:: pair: function; Color_ARGB32_Set_B
.. _doxid-group__libccc__color_1gafcd6b5811057adc6514928bcc2a84f2d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` Color_ARGB32_Set_B(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color, t_u8 b)

Returns the given 32-bit 'color', with the 'b' blue channel value changed.

.. index:: pair: function; Color_ARGB32_To_ARGB16
.. _doxid-group__libccc__color_1ga77c15aa66b48ac08d54b53d4eef69112:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` Color_ARGB32_To_ARGB16(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color)

Converts the given 32-bit color value to its 16-bit equivalent (rounding down)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- color

		- The 32-bit color to convert



.. rubric:: Returns:

a 16-bit ARGB color, by dividing the color channel values of the given 32-bit 'color' value (values are rounded down in the process).

.. index:: pair: function; Color_ARGB32_To_ARGB
.. _doxid-group__libccc__color_1gaf9b8afe46953295cca1a4696a0bada76:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` Color_ARGB32_To_ARGB(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` color)

Converts the given 16-bit color value to its float color equivalent.

.. index:: pair: function; Color_ARGB32_GetNearest
.. _doxid-group__libccc__color_1ga0ddb82050b94d61cb51541cbdc26a604:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>`* Color_ARGB32_GetNearest(:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` target, :ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>`* colors, :ref:`t_size<doxid-group__libccc__pointer_1gab26ea4b5e8504781be1c368c28967472>` n)

Find the nearest color to the given 'target' color, from within the given arrays of 'colors'.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- target

		- The desired color, for which the nearest will be returned

	*
		- colors

		- The array of different colors to check against

	*
		- n

		- The amount of colors to check in the 'colors' array



.. rubric:: Returns:

a pointer to the color within 'colors' which is the closest match to the given 'target' color, searching through 'n' colors in the array.

.. index:: pair: function; Color_ARGB_Set
.. _doxid-group__libccc__color_1ga3b62dab4a5263f9cedcc56b4a3ee8f57:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` Color_ARGB_Set(:ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` a, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` r, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` g, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` b)

Creates a float color struct from the given channel values (alpha, red, green, blue)

This function creates a new floating-point color struct from the given four individual color channel values (constains them between 0 and 1)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- The alpha channel value (0.0 to 1.0)

	*
		- r

		- The red channel value (0.0 to 1.0)

	*
		- g

		- The green channel value (0.0 to 1.0)

	*
		- b

		- The blue channel value (0.0 to 1.0)



.. rubric:: Returns:

the floating-point color struct from the given channel values

.. index:: pair: function; Color_ARGB_Set_A
.. _doxid-group__libccc__color_1gaada2d1dc436d21ea58de72fa2d13b6f9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Color_ARGB_Set_A(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` a)

Sets the given 'a' alpha channel value in the given struct 'color' (constraining it between 0 and 1)

.. index:: pair: function; Color_ARGB_Set_R
.. _doxid-group__libccc__color_1gac88872a49777a81dbb64e3c3914201a4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Color_ARGB_Set_R(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` r)

Sets the given 'r' red channel value in the given struct 'color' (constraining it between 0 and 1)

.. index:: pair: function; Color_ARGB_Set_G
.. _doxid-group__libccc__color_1ga838b3311f250a4f76ab0e881d0553f1c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Color_ARGB_Set_G(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` g)

Sets the given 'g' green channel value in the given struct 'color' (constraining it between 0 and 1)

.. index:: pair: function; Color_ARGB_Set_B
.. _doxid-group__libccc__color_1ga330d2cf921f97fdfc382b6037437822d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Color_ARGB_Set_B(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` b)

Sets the given 'b' blue channel value in the given struct 'color' (constraining it between 0 and 1)

.. index:: pair: function; Color_ARGB_To_ARGB16
.. _doxid-group__libccc__color_1gacb35536aa6188fafe3accb60e2576a71:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb16<doxid-group__libccc__color_1ga582b65837c6d003c9a33ff37bdc0a340>` Color_ARGB_To_ARGB16(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` const* color)

Converts the given floating-point color struct value to its 16-bit equivalent.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- color

		- The floating-point color struct to convert



.. rubric:: Returns:

a 16-bit ARGB color by dividing the color channel values of the given 32-bit 'color' value (values are rounded down in the process).

.. index:: pair: function; Color_ARGB_To_ARGB32
.. _doxid-group__libccc__color_1gaea403e694ddc5402b57570fd29e014f0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`t_argb32<doxid-group__libccc__color_1gaa99a65ec9f3027d535a11dce70ee5f71>` Color_ARGB_To_ARGB32(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` const* color)

Converts the given floating-point color struct value to its 32-bit equivalent.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- color

		- The floating-point color struct to convert



.. rubric:: Returns:

a 16-bit ARGB color by dividing the color channel values of the given 32-bit 'color' value (values are rounded down in the process).

.. index:: pair: function; Color_ARGB_To_AHSL
.. _doxid-group__libccc__color_1gacdc502819c7ddf76dc58d3244d50f4c7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>` Color_ARGB_To_AHSL(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` const* color)

Converts the given floating-point color struct value to hue/sat/lum color format.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- color

		- The floating-point color struct to convert



.. rubric:: Returns:

the equivalent to the given 'color', in hue/sat/lum format

.. index:: pair: function; Color_ARGB_GetNearest
.. _doxid-group__libccc__color_1gaf2509ab3ae77194f030976bd3bf3bc59:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* Color_ARGB_GetNearest(:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` target, :ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>`* colors, :ref:`t_size<doxid-group__libccc__pointer_1gab26ea4b5e8504781be1c368c28967472>` n)

Find the nearest color to the given 'target' color from within the given arrays of 'colors'.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- target

		- The desired color, for which the nearest will be returned

	*
		- colors

		- The array of different colors to check against

	*
		- n

		- The amount of colors to check in the 'colors' array



.. rubric:: Returns:

a pointer to the color within 'colors' which is the closest match to the given 'target' color, searching through 'n' colors in the array.

.. index:: pair: function; Color_AHSL_Set
.. _doxid-group__libccc__color_1gaec863ed1e119f4a30fd3fad71c2e85e6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>` Color_AHSL_Set(:ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` a, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` hue, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` sat, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` lum)

Creates a float color struct from the given channel values (alpha, hue, sat, lum)

This function creates a new floating-point color struct from the given four individual color channel values (constains them)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- a

		- The alpha channel value (constrained to interval [0,1])

	*
		- hue

		- The color hue/value (constrained to interval [0,PI\*2])

	*
		- sat

		- The color saturation (constrained to interval [0,1])

	*
		- lum

		- The color luminance/brightness (constrained to interval [0,1])



.. rubric:: Returns:

the floating-point color struct from the given channel values

.. index:: pair: function; Color_AHSL_Set_A
.. _doxid-group__libccc__color_1ga253a7298c2e069bce7a9ed64fdb6b279:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Color_AHSL_Set_A(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` a)

Sets the given 'a' channel value in the given struct 'color' (constraining it between 0 and 1)

.. index:: pair: function; Color_AHSL_Set_H
.. _doxid-group__libccc__color_1ga93e8d7a13864b658d5202a5fbea5eba0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Color_AHSL_Set_H(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` hue)

Sets the given 'r' channel value in the given struct 'color' (constraining it between 0 and PI\*2)

.. index:: pair: function; Color_AHSL_Set_S
.. _doxid-group__libccc__color_1gacca2bc25cdb6548e1b7a2d0f6767fcb0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Color_AHSL_Set_S(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` sat)

Sets the given 'g' channel value in the given struct 'color' (constraining it between 0 and 1)

.. index:: pair: function; Color_AHSL_Set_L
.. _doxid-group__libccc__color_1ga9a8db3c8e1900761e8d17d78850e7ada:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void Color_AHSL_Set_L(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* color, :ref:`t_float<doxid-group__libccc__float_1ga062b5f7ac5af1921a0d50e5b59f7a496>` lum)

Sets the given 'b' channel value in the given struct 'color' (constraining it between 0 and 1)

.. index:: pair: function; Color_AHSL_To_ARGB
.. _doxid-group__libccc__color_1ga2b1930a815ebed2dd70dfd9c516c6273:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`s_argb<doxid-group__libccc__color_1ga2ce6e41a7d4cf5623c5c7b68113df98e>` Color_AHSL_To_ARGB(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>` const* color)

Converts the given floating-point color struct value to hue/sat/lum color format.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- color

		- The floating-point color struct to convert



.. rubric:: Returns:

the equivalent to the given 'color', in hue/sat/lum format

.. index:: pair: function; Color_AHSL_GetNearest
.. _doxid-group__libccc__color_1ga3c0edb628eb0662498f478ee56fdb1c2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* Color_AHSL_GetNearest(:ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>` target, :ref:`s_ahsl<doxid-group__libccc__color_1gaf56178ad7a63d493cc434a68a626f548>`* colors, :ref:`t_size<doxid-group__libccc__pointer_1gab26ea4b5e8504781be1c368c28967472>` n)

Find the nearest color to the given 'target' color from within the given arrays of 'colors'.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- target

		- The desired color, for which the nearest will be returned

	*
		- colors

		- The array of different colors to check against

	*
		- n

		- The amount of colors to check in the 'colors' array



.. rubric:: Returns:

a pointer to the color within 'colors' which is the closest match to the given 'target' color, searching through 'n' colors in the array.

Macros
------

.. index:: pair: define; COLOR_ARGB16_A
.. _doxid-group__libccc__color_1ga255ba37b7dfeaf9c02d727896d4e1707:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB16_A

0b1000000000000000 or 0x8000 - bitmask for the 16-bit color's alpha channel (0 or 1)

.. index:: pair: define; COLOR_ARGB16_A_BITINDEX
.. _doxid-group__libccc__color_1ga78b1bc17e23c9f4239d79b8bcb742154:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB16_A_BITINDEX

The bit index for the 16-bit color's alpha channel (0 or 1)

.. index:: pair: define; COLOR_ARGB16_B
.. _doxid-group__libccc__color_1ga8e7bf3b9769ab90051bdaec2b8dddd43:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB16_B

0b0111110000000000 or 0x7C00 - bitmask for the 16-bit color's blue channel [0,31]

.. index:: pair: define; COLOR_ARGB16_B_BITINDEX
.. _doxid-group__libccc__color_1gac61ab29341fcd6e8017f0c28f08875e0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB16_B_BITINDEX

The bit index for the 16-bit color's blue channel [0,31].

.. index:: pair: define; COLOR_ARGB16_CHANNEL
.. _doxid-group__libccc__color_1ga1244cd1f438f78e48f52f96394d09125:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB16_CHANNEL

The maximum possible value for one color channel of an ARGB16 color [0,31].

.. index:: pair: define; COLOR_ARGB16_G
.. _doxid-group__libccc__color_1ga778f96f46511b9a5784f25deb1a7e2af:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB16_G

0b0000001111100000 or 0x03E0 - bitmask for the 16-bit color's green channel [0,31]

.. index:: pair: define; COLOR_ARGB16_G_BITINDEX
.. _doxid-group__libccc__color_1ga3d80c01d2f38894868262b10b052ca07:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB16_G_BITINDEX

The bit index for the 16-bit color's green channel [0,31].

.. index:: pair: define; COLOR_ARGB16_R
.. _doxid-group__libccc__color_1ga1b7bce0a3191d73cbe19c2d4cec7fa1b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB16_R

0b0000000000011111 or 0x001F - bitmask for the 16-bit color's red channel [0,31]

.. index:: pair: define; COLOR_ARGB16_R_BITINDEX
.. _doxid-group__libccc__color_1gabc339153320653873a3a6ba96a74af37:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB16_R_BITINDEX

The bit index for the 16-bit color's red channel [0,31].

.. index:: pair: define; COLOR_ARGB32_A
.. _doxid-group__libccc__color_1ga0dbf2be1e88684220017ba610970d2c0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB32_A

0xFF000000 - bitmask for the 32-bit color's alpha channel [0,255]

.. index:: pair: define; COLOR_ARGB32_A_BITINDEX
.. _doxid-group__libccc__color_1ga10ecb3d73f55ab45344ca3a096ab5ba3:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB32_A_BITINDEX

The bit index for the 32-bit color's alpha channel [0,255].

.. index:: pair: define; COLOR_ARGB32_B
.. _doxid-group__libccc__color_1gac4783a8cb1ed7522e7c2577eeb9bd3d2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB32_B

0x000000FF - bitmask for the 32-bit color's blue channel [0,255]

.. index:: pair: define; COLOR_ARGB32_B_BITINDEX
.. _doxid-group__libccc__color_1gad67507373189b4fe7ceedb8f8ded03fc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB32_B_BITINDEX

The bit index for the 32-bit color's blue channel [0,255].

.. index:: pair: define; COLOR_ARGB32_CHANNEL
.. _doxid-group__libccc__color_1ga3ba45d610ad8618a0143331d688b2fe8:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB32_CHANNEL

The maximum possible value for one color channel of an ARGB16 color [0,255].

.. index:: pair: define; COLOR_ARGB32_G
.. _doxid-group__libccc__color_1gaeb63f74062ebe75c6b1007ae338b9d3d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB32_G

0x0000FF00 - bitmask for the 32-bit color's green channel [0,255]

.. index:: pair: define; COLOR_ARGB32_G_BITINDEX
.. _doxid-group__libccc__color_1ga6fadd9ca01d3591e4756617c1a423a18:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB32_G_BITINDEX

The bit index for the 32-bit color's green channel [0,255].

.. index:: pair: define; COLOR_ARGB32_R
.. _doxid-group__libccc__color_1gab95791a4496c7541b4c06e73d20001d9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB32_R

0x00FF0000 - bitmask for the 32-bit color's red channel [0,255]

.. index:: pair: define; COLOR_ARGB32_R_BITINDEX
.. _doxid-group__libccc__color_1ga8d54b93a72cc572c49742e8171f068f2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define COLOR_ARGB32_R_BITINDEX

The bit index for the 32-bit color's red channel [0,255].

